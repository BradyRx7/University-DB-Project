/*
 * Brady Reed
 * Umass Lowell INFO3010
 */
package bradyreed.view;

import java.util.GregorianCalendar;
import java.util.ArrayList;
import java.util.regex.Pattern;

import bradyreed.baseclasses.Student;
import bradyreed.baseclasses.StudentCourse;
import bradyreed.baseclasses.OfferedCourse;

import bradyreed.model.StudentDataModel;
import bradyreed.model.OfferedCourseDataModel;

import bradyreed.exceptionhandling.*;


/**
 *
 * @author brady
 */
public class InputStudentInfo extends javax.swing.JFrame {

    protected String[] offeredCourseStringList;
    private StudentDataModel studentdatamodel;
    private OfferedCourseDataModel offeredCoursesDataModel;
    
    /**
     * Creates new form ClassroomInputFormUsingNetbeans
     */
    public InputStudentInfo(StudentDataModel studentDataModelArg, 
                OfferedCourseDataModel offeredCoursesDataModelArg) {
        
        //Retrieve list of courses and convert to string array for netbeans
        // to display course list in a string array rather than ArrayList<String>
        
        this.studentdatamodel = studentDataModelArg;
        this.offeredCoursesDataModel = offeredCoursesDataModelArg;
        
        int courseListLength;
        courseListLength = offeredCoursesDataModel.getListOfOfferedCourses().size();
        String courseId;
        offeredCourseStringList = new String[courseListLength];
        for (int i = 0; i < courseListLength; i++)
        {
            courseId = offeredCoursesDataModel.getListOfOfferedCourses().get(i).getCourseId();
            offeredCourseStringList[i] = courseId;
        }
        
        initComponents();
        // Set Size after creating
        this.setSize(375, 665);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        studentNameLabel = new javax.swing.JLabel();
        studentAddressLabel = new javax.swing.JLabel();
        studentNameTextField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        studentAddressTextField = new javax.swing.JTextField();
        studentSsnTextField = new javax.swing.JTextField();
        currentGpaTextField = new javax.swing.JTextField();
        studentSsnLabel = new javax.swing.JLabel();
        studentGradDateLabel = new javax.swing.JLabel();
        studentDateOfBirthLabel = new javax.swing.JLabel();
        studentGpaLabel = new javax.swing.JLabel();
        studentEnrolledCourseGradeListLabel2 = new javax.swing.JLabel();
        studentGradDateSpinner_Month = new javax.swing.JSpinner();
        studentGradDateSpinner_Day = new javax.swing.JSpinner();
        studentGradDateSpinner_Year = new javax.swing.JSpinner();
        dateOfBirthSpinner_Year = new javax.swing.JSpinner();
        dateOfBirthSpinner_Day = new javax.swing.JSpinner();
        dateOfBirthSpinner_Month = new javax.swing.JSpinner();
        studentEnrolledCoursesLabel = new javax.swing.JLabel();
        studentCourseListScrollPane1 = new javax.swing.JScrollPane();
        studentEnrolledCoursesListField = new javax.swing.JList<>();
        studentEnrolledCourseGradeListLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentEnrolledCourseGradesListField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        studentNameLabel.setText("Student Name:");
        getContentPane().add(studentNameLabel);
        studentNameLabel.setBounds(30, 20, 120, 14);

        studentAddressLabel.setText("Address:");
        getContentPane().add(studentAddressLabel);
        studentAddressLabel.setBounds(30, 70, 100, 14);
        getContentPane().add(studentNameTextField);
        studentNameTextField.setBounds(120, 10, 220, 30);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        getContentPane().add(saveButton);
        saveButton.setBounds(20, 570, 100, 23);

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        getContentPane().add(clearButton);
        clearButton.setBounds(140, 570, 90, 23);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(closeButton);
        closeButton.setBounds(250, 570, 90, 23);
        getContentPane().add(studentAddressTextField);
        studentAddressTextField.setBounds(120, 70, 220, 50);
        getContentPane().add(studentSsnTextField);
        studentSsnTextField.setBounds(120, 140, 150, 30);
        getContentPane().add(currentGpaTextField);
        currentGpaTextField.setBounds(120, 250, 100, 30);

        studentSsnLabel.setText("SSN:");
        getContentPane().add(studentSsnLabel);
        studentSsnLabel.setBounds(30, 140, 70, 14);

        studentGradDateLabel.setText("Date of Graduation:");
        getContentPane().add(studentGradDateLabel);
        studentGradDateLabel.setBounds(30, 320, 120, 14);

        studentDateOfBirthLabel.setText("Date of Birth:");
        getContentPane().add(studentDateOfBirthLabel);
        studentDateOfBirthLabel.setBounds(30, 190, 100, 14);

        studentGpaLabel.setText("Current GPA:");
        getContentPane().add(studentGpaLabel);
        studentGpaLabel.setBounds(30, 260, 90, 14);

        studentEnrolledCourseGradeListLabel2.setText("GPA with (,) use same order as left");
        getContentPane().add(studentEnrolledCourseGradeListLabel2);
        studentEnrolledCourseGradeListLabel2.setBounds(180, 390, 200, 20);

        studentGradDateSpinner_Month.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));
        getContentPane().add(studentGradDateSpinner_Month);
        studentGradDateSpinner_Month.setBounds(140, 320, 50, 30);

        studentGradDateSpinner_Day.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));
        getContentPane().add(studentGradDateSpinner_Day);
        studentGradDateSpinner_Day.setBounds(200, 320, 50, 30);

        studentGradDateSpinner_Year.setModel(new javax.swing.SpinnerNumberModel(2017, 2010, 2100, 1));
        getContentPane().add(studentGradDateSpinner_Year);
        studentGradDateSpinner_Year.setBounds(260, 320, 70, 30);

        dateOfBirthSpinner_Year.setModel(new javax.swing.SpinnerNumberModel(1990, 1920, 2010, 1));
        getContentPane().add(dateOfBirthSpinner_Year);
        dateOfBirthSpinner_Year.setBounds(270, 190, 70, 30);

        dateOfBirthSpinner_Day.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));
        getContentPane().add(dateOfBirthSpinner_Day);
        dateOfBirthSpinner_Day.setBounds(210, 190, 50, 30);

        dateOfBirthSpinner_Month.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));
        getContentPane().add(dateOfBirthSpinner_Month);
        dateOfBirthSpinner_Month.setBounds(140, 190, 50, 30);

        studentEnrolledCoursesLabel.setText("Enrolled Courses:");
        getContentPane().add(studentEnrolledCoursesLabel);
        studentEnrolledCoursesLabel.setBounds(40, 400, 110, 14);

        studentEnrolledCoursesListField.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = offeredCourseStringList;
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        studentCourseListScrollPane1.setViewportView(studentEnrolledCoursesListField);

        getContentPane().add(studentCourseListScrollPane1);
        studentCourseListScrollPane1.setBounds(10, 420, 150, 120);

        studentEnrolledCourseGradeListLabel1.setText("Course Grades: Separate Each Course");
        getContentPane().add(studentEnrolledCourseGradeListLabel1);
        studentEnrolledCourseGradeListLabel1.setBounds(170, 370, 210, 20);

        studentEnrolledCourseGradesListField.setColumns(20);
        studentEnrolledCourseGradesListField.setLineWrap(true);
        studentEnrolledCourseGradesListField.setRows(5);
        studentEnrolledCourseGradesListField.setWrapStyleWord(true);
        jScrollPane1.setViewportView(studentEnrolledCourseGradesListField);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(180, 420, 160, 120);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        
        //Erase the text fields
        this.studentNameTextField.setText("");
        this.studentAddressTextField.setText("");
        this.studentSsnTextField.setText("");
        this.currentGpaTextField.setText("");
        
        //Set date spinners to default values
        this.dateOfBirthSpinner_Day.setValue(1);
        this.dateOfBirthSpinner_Month.setValue(1);
        this.dateOfBirthSpinner_Year.setValue(1990);
        
        this.studentGradDateSpinner_Day.setValue(1);
        this.studentGradDateSpinner_Month.setValue(1);
        this.studentGradDateSpinner_Year.setValue(2017);     

        //Clear course list selections 
        this.studentEnrolledCoursesListField.clearSelection();
        this.studentEnrolledCourseGradesListField.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        
        
            // Create a new student object for storing form data
            Student aStudent = new Student();
            boolean saveSuccess = false;

            // Retrieve the string values from the form
            
            String studentName = this.studentNameTextField.getText();
            String studentAddress = this.studentAddressTextField.getText();
            String  studentSSN = this.studentSsnTextField.getText();
            float studentGPA = Float.MIN_VALUE;

            //Exception handling for Data
            try {                
                if (studentName.equals(""))
                    throw new NoDataException("Missing Student Name");
                               
                if (studentAddress.equals(""))
                    throw new NoDataException("Missing Student Address");
                
                //Throws exception if SSN is blank, more than 9 characters, or
                //if it contains something other than a number
                if (studentSSN.equals(""))
                    throw new NoDataException("Missing Student Name");
                if ((studentSSN.length() != 9) || (!Pattern.matches("\\d+", studentSSN)))
                    throw new InvalidDataException("SSN format is invalid");
                /**
                 * Uses internal exception thrown from parseFloat() Method
                 * Throws NullDataPointer if Null (not possible for getText method)
                 * but is left unchecked if it did occur
                 * and throws NumberFormatException if cannot be parsed to a Float.
                 * Chained exception catches default exception and throws one of our
                 * designed exceptions with an appropriate message
                **/
                try {
                studentGPA = Float.parseFloat(this.currentGpaTextField.getText());
                }
                catch (NumberFormatException error) {
                    throw new InvalidDataException("Invalid GPA Format");
                }
                saveSuccess = true;
            }
            catch (InvalidDataException | NoDataException error)
            {               
                ErrorDialog errordialog = new ErrorDialog(error.getMessage());
                errordialog.setVisible(true);
            }
            
            
            aStudent.setName(studentName);
            aStudent.setAddress(studentAddress);
            aStudent.setSSN(studentSSN);
            aStudent.setCurrentGPA(studentGPA);
            //Retrieve the date values from the form and convert to date objects
            
            int day, month, year;   //temporary integer storage for date conversions
            
            //calendar for storing conversion and transferring date to object
            GregorianCalendar txDate = new GregorianCalendar(); 
            
            //Getting, converting, and storing Birth date spinners
            day = (Integer)this.dateOfBirthSpinner_Day.getValue();
            month = ((Integer)this.dateOfBirthSpinner_Month.getValue() - 1);
            year = (Integer)this.dateOfBirthSpinner_Year.getValue();
            txDate.set(year, month, day);
            aStudent.setDateOfBirth(txDate);
            
            //Getting, converting, and storing Hire date spinners
            day = month = year = 0;
            txDate = new GregorianCalendar();
            
            day = (Integer)this.studentGradDateSpinner_Day.getValue();
            month = ((Integer)this.studentGradDateSpinner_Month.getValue() - 1);
            year = (Integer)this.studentGradDateSpinner_Year.getValue();
            txDate.set(year, month, day);
            aStudent.setDateOfGraduation(txDate);
            
            
           //Read in and save courses taught & grades from list boxes
            ArrayList<String> txStringCourseIdList = 
                new ArrayList<>(this.studentEnrolledCoursesListField.getSelectedValuesList());
            
            String txStringCourseGradeList = 
               this.studentEnrolledCourseGradesListField.getText();
            String[] courseGradesSplitInput = txStringCourseGradeList.split(",");
            
            /** Course list box strings and grades converted to a student course
             * object by courseId then added to StudentCourse list
            **/
            
            ArrayList<StudentCourse> txStudentCourseList;
            txStudentCourseList = new ArrayList<>();
            double sCourseGrade;
            
            //add exception for null or no courses selected before this point
            // or uneven grade/course input ratio
            
            //convert string list to student course then to student course list
            for (int i = 0; i < txStringCourseIdList.size(); i++)
            {  
                StudentCourse sCourse = new StudentCourse();
                sCourseGrade = Double.parseDouble(courseGradesSplitInput[i]);
                sCourse.setCourseGrade(sCourseGrade);
            
                sCourse.setCourseId(txStringCourseIdList.get(i));
                txStudentCourseList.add(sCourse);
                
            }
            
            // Add the list of selected courses to Student object
            aStudent.setEnrolledCourses(txStudentCourseList);
            
            // Add student member to the studentdatamodel passed to the form
            this.studentdatamodel.getListOfStudents().add(aStudent);
            
            //Pass data model back to top level form
           // TopLevelMenuForm.setDataModel(studentdatamodel);
           
            //testing the form save action, only applicable to individual form testing
//            System.out.println("Save was successfull");
//            System.out.println(studentdatamodel.getListOfStudents().get(1).toString());
           if (saveSuccess)
               this.dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputStudentInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputStudentInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputStudentInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputStudentInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        StudentDataModel studentDataModelTest = new StudentDataModel();
        Student testStudent = new Student();
        studentDataModelTest.getListOfStudents().add(testStudent);
        OfferedCourseDataModel offeredCoursesDataModelTest = new OfferedCourseDataModel();
        
        OfferedCourse testCourse = new OfferedCourse("567", "Chemistry");
        offeredCoursesDataModelTest.getListOfOfferedCourses().add(testCourse);
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InputStudentInfo(studentDataModelTest, 
                offeredCoursesDataModelTest).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JTextField currentGpaTextField;
    private javax.swing.JSpinner dateOfBirthSpinner_Day;
    private javax.swing.JSpinner dateOfBirthSpinner_Month;
    private javax.swing.JSpinner dateOfBirthSpinner_Year;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel studentAddressLabel;
    private javax.swing.JTextField studentAddressTextField;
    private javax.swing.JScrollPane studentCourseListScrollPane1;
    private javax.swing.JLabel studentDateOfBirthLabel;
    private javax.swing.JLabel studentEnrolledCourseGradeListLabel1;
    private javax.swing.JLabel studentEnrolledCourseGradeListLabel2;
    private javax.swing.JTextArea studentEnrolledCourseGradesListField;
    private javax.swing.JLabel studentEnrolledCoursesLabel;
    private javax.swing.JList<String> studentEnrolledCoursesListField;
    private javax.swing.JLabel studentGpaLabel;
    private javax.swing.JLabel studentGradDateLabel;
    private javax.swing.JSpinner studentGradDateSpinner_Day;
    private javax.swing.JSpinner studentGradDateSpinner_Month;
    private javax.swing.JSpinner studentGradDateSpinner_Year;
    private javax.swing.JLabel studentNameLabel;
    private javax.swing.JTextField studentNameTextField;
    private javax.swing.JLabel studentSsnLabel;
    private javax.swing.JTextField studentSsnTextField;
    // End of variables declaration//GEN-END:variables
}
